"""
Description:
- Generates plots and plot pages for some or all files using root2html_stgc.py
    - Options
        -a: creates pages for all root files, replacing any already existing ones (maybe create a backup?)
        -n: create pages only for new root files, i.e. without an existing page
        -f: creates/updates web pages for only the files specified (with paths) after the -f flag
        -j: specifies highslide path (location of highslide-5.0.0 directory) for root2html_stgc.py
- Updates html for the file tree that gets loaded into index.html and any other navigation pages
"""

import sys
import os
import getopt

mode = 'new'  # Specifies mode used when no argument is provided. Set to 'new' or 'all'
highslide_path = None

def main(argv):
    short_options = 'anf:j:'
    try:
        opts, args = getopt.gnu_getopt(argv, short_options)
        print('opts = ', opts)
    except getopt.GetoptError:
        print('Argument not recognized; choose from -a, -n, -f, or -j. See code for details.\n')
        raise SystemExit

    else:
        for opt, val in opts:
            if opt == '-j':
                global highslide_path
                highslide_path = val + 'highslide-5.0.0/highslide'
                print('Setting highslide path to ', val)
            if opt == '-a':
                mode = 'all'
            elif opt == '-n':
                mode = 'new'
            elif opt == '-f':
                mode = 'files'
                files = val
                print('Files: ', type(files), files) # for testing
                if type(files) == str:
                    files = [files] # make sure format is consistent

    if mode == 'all':
        update_all()
    elif mode == 'new':
        update_new()
    elif mode == 'files':
        update_files(files)

# Old version (save until verified):
#    if len(sys.argv) > 1:
#        if sys.argv[1] == '-all':
#            update_all()
#        elif sys.argv[1] == '-new':
#            update_new()
#        elif sys.argv[1] == '-f':
#            if len(sys.argv) < 2:
#                print('"-f" option must be followed by one or more file names.')
#                raise SystemExit
#            else:
#                files = sys.argv[2:]
##        else:
#            print('Unrecognized arguments: ', sys.argv[1:])


#    elif len(sys.argv) == 1:
#        if DEFAULT == 'new':type(val)
#            update_new()
#        elif DEFAULT == 'all':
#            update_all()
#        else:
#            print('Parameter "DEFAULT" specified in code is not recognized. Confirm that the value is set to either "new" or "all".')

    print('Updating html file tree...')
    update_filetree()
    print('\n\n\nUpdate complete.\n')


def update_all():
    # Including two user confirmations to avoid accidentally re-running for every file.
    # Can be removed if too inconvenient.
    confirm = input('\nWarning: option -all will execute root2html_stgc.py for every available .root file and will overwrite any previous plot data. Continue? (y/n)')
    if confirm.lower() != 'y' and confirm.lower() != 'yes':
        print('Exiting program.')
        raise SystemExit
    else:
        rootfiles = []
        for root, dirs, files in os.walk('../calibrations/stg'):
            for file in files:
                if 'summary_plots.root' in file:  # Modify for threshold/pdo/tdo
                    rootfiles.append(root + '/' + file)

        print('Executing root2html_stgc.py for the following files:')
        for file in rootfiles:
            #print('\t' + file.split("/")[-1])
            #test:
            print('\t' + file)
        confirm = input('Press "Enter" to confirm.')
        if confirm != '':
            print('Exiting program.')
            raise SystemExit
        else:
            for file in rootfiles:
                filename = file.split("/")[-1]
                print(f'\n\n##### {filename} #####\n')
                update_file(file)

        print('\n\n\n\nPlot updates complete.')


def update_new():
    rootfiles = []
    for root, dirs, files in os.walk('../calibrations/stg'):
        for file in files:
            if 'summary_plots.root' in file:  # Modify for threshold/pdo/tdo
                if file[:-5] not in dirs:  # Checks whether a directory has previously been generated by root2html_stgc.py
                    rootfiles.append(root + '/' + file)

    print('Executing root2html_stgc.py for the following files:')
    for file in rootfiles:
        print('\t' + file.split("/")[-1])

    confirm = input('Press "Enter" to confirm.')
    if confirm != '':
        print('Exiting program.')
        raise SystemExit
    else:
        for file in rootfiles:
            print(f'\n\n##### {file.split("/")[-1]} #####\n')
            update_file(file)


def update_file(file):
    # Currently does not support root2html_stgc.py options other than -j (highslide path)
    if highslide_path == None:
        os.system(f'python3 root2html_stgc.py {file}')
    else:
        os.system(f'python3 root2html_stgc.py {file} -j {highslide_path}')

def update_files(files):
    print('Executing root2html_stgc.py for the following files:')
    for file in files:
        print('\t' + file.split("/")[-1])

    confirm = input('Press "Enter" to confirm.')
    if confirm != '':
        print('Exiting program.')
        raise SystemExit
    else:
        for file in files:
            print(f'\n\n##### {file.split("/")[-1]} #####\n')
            update_file(file)

def update_filetree():
    os.system('python3 make_filetree.py')


if __name__ == '__main__':
    main(sys.argv[1:])
